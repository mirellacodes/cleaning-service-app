// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User Types
enum UserRole {
  ADMIN
  CUSTOMER
  CLEANER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
}

// User model - base for all user types
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password     String
  role          UserRole
  status        UserStatus @default(PENDING)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Profile information
  firstName    String
  lastName     String
  phone        String?
  avatar       String?
  
  // Role-specific relations
  admin        Admin?
  customer     Customer?
  cleaner      Cleaner?

  // Common relations
  sessions     Session[]
  accounts    Account[]

  @@map("users")
}

// Admin-specific model
model Admin {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  permissions String   // Comma-separated permission strings
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("admins")
}

// Customer-specific model
model Customer {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  address         String
  unit            String?
  postalCode      String
  preferences     String?  // JSON string for cleaning preferences
  totalBookings   Int      @default(0)
  totalSpent      Float    @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  bookings       Booking[]
  reviews        Review[]

  @@map("customers")
}

// Cleaner-specific model
model Cleaner {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  specialties     String   // Comma-separated service types
  hourlyRate      Float
  rating          Float    @default(0)
  completedJobs   Int      @default(0)
  joinDate        DateTime @default(now())
  availability    String?  // JSON string for working hours
  documents       String   // Comma-separated document URLs
  status          UserStatus @default(PENDING)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  assignedJobs   Booking[]
  reviews        Review[]

  @@map("cleaners")
}

// Service Types
enum ServiceType {
  RESIDENTIAL
  COMMERCIAL
  DEEP_CLEANING
  MOVE_IN_OUT
  POST_RENOVATION
  DISINFECTION
}

enum ServiceStatus {
  ACTIVE
  INACTIVE
  DISCONTINUED
}

// Service model
model Service {
  id          String        @id @default(cuid())
  name        String
  type        ServiceType
  description String
  basePrice   Float
  duration    Int           // in minutes
  status      ServiceStatus @default(ACTIVE)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  serviceOptions ServiceOption[]
  bookings      Booking[]

  @@map("services")
}

// Service options (add-ons)
model ServiceOption {
  id          String   @id @default(cuid())
  serviceId   String
  service     Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  name        String
  description String?
  price       Float
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  bookingOptions BookingOption[]

  @@map("service_options")
}

// Booking Status
enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum Frequency {
  ONCE
  WEEKLY
  BI_WEEKLY
  MONTHLY
}

// Booking model
model Booking {
  id              String        @id @default(cuid())
  customerId      String
  customer        Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  serviceId       String
  service         Service       @relation(fields: [serviceId], references: [id])
  cleanerId       String?
  cleaner         Cleaner?      @relation(fields: [cleanerId], references: [id])
  
  // Booking details
  scheduledDate   DateTime
  scheduledTime   String
  frequency       Frequency     @default(ONCE)
  status          BookingStatus @default(PENDING)
  totalAmount     Float
  specialInstructions String?
  
  // Property details
  bedrooms        Int?
  bathrooms       Int?
  squareFootage   Int?
  
  // Timestamps
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  completedAt     DateTime?
  
  // Relations
  selectedOptions BookingOption[]
  payments        Payment[]
  reviews         Review[]

  @@map("bookings")
}

// Booking options (selected add-ons)
model BookingOption {
  id              String   @id @default(cuid())
  bookingId       String
  booking         Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  serviceOptionId String
  serviceOption   ServiceOption @relation(fields: [serviceOptionId], references: [id])
  price           Float
  createdAt       DateTime @default(now())

  @@map("booking_options")
}

// Payment Status
enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PAYNOW
  BANK_TRANSFER
  CASH
}

// Payment model
model Payment {
  id              String        @id @default(cuid())
  bookingId       String
  booking         Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  amount          Float
  method          PaymentMethod
  status          PaymentStatus @default(PENDING)
  transactionId   String?       // External payment processor ID
  paidAt          DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("payments")
}

// Review model
model Review {
  id          String   @id @default(cuid())
  bookingId   String   @unique
  booking     Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  customerId  String
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  cleanerId   String
  cleaner     Cleaner @relation(fields: [cleanerId], references: [id], onDelete: Cascade)
  rating      Int      // 1-5 stars
  comment     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("reviews")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
